Database
-----------------------------------
- Install MySQL.
- CUI(MySQLCommandLineClient) and GUI(Workbench)
- How to create db
How to work on DB

Command to running a script file: >source <path to script file>
Command to give current DB which you are working : select database();

- DDL: Create, Drop, Alter
--------
1.CREATE
--------
Option1
--------
create table table_name(
   column_name datatype,
   column_name datatype,
   ...
);
Option2
-------
create table table_name as select * from table_name;  --> create table emp1 as select * from emp1;  => emp1 will be created with same sturcture and data as emp table.

-----------
2. ALTER  - add, modify, drop, rename,...etc
------------
- Alter object strycture.
   Alter table emp add column_name datatype;
   Alter table emp add (column_name datatype, column_name datatype, ...);
   alter table emp add check(dept_no in (10,20,30));  // adding check constraint.
- You can also; modify--> size of datatype: Alter table emp modify enmae varchar(new-size);
                      --> constraint: alter table emp modify eno int not null;
                      -->
                drop --> a column: Alter table emp drop eno;
                rename
--------------
3. Truncate
--------------
-Removes all data from table. Only structire remains.
   > truncate table table-name;
- Rollback not possible.
- Where clause cannot be used.
- Removes all data at one go.
----------------
4. RENAME
----------------
- Renaming:
  => tables: > rename table emp to emp1
  => columns: > alter table rename column ename to name;
  => constraints
-
    +. How to create a DB
	+. DataTypes.
	+. cONSTRAINTS.
	+. Drop
	+. Alter Table.
	    -> Adding new column.
		->Modifying an exeisting column
		-> Renaming an Existing column
		
-DML: insert, Update, Delete
--------------
1. INSERT
--------------
- Adding new data.
insert into table_name values(101,'Colince', 2000) --> order will be followed as in table.
insert into emp (col1, col2, ...) values(col1_value, col2_value, ...);

--------------
2. UPDATE
--------------
- Modify existing data.
 update table_name set col_name=<value>,col_name=<value> where <condition>;

--------------
3. DELETE
--------------
- remove data from table.
- Rollback possible.
- Where clause can be used.
- We can remoeve all||single||multiple records as per our wish.
delete from table_name; --> Deletes all records are retains the table structure.
delete from emp where <condition>; --> Delete particular records.

-DQL: (Data Query Language) : Select.
    +. Select
	+. Select distinct.
	+. Column Alias
	+. Filtering WHERE
	


    Session-3
	------------
	-------------
- Select database(); --> Tells the current db on which your are currently working.
- use database; --> To use a database.
- You can use select command as a calculator in MySQL: I.e., select 40*5;
- Syntax of select statement: help select
-  Select * from table;  --> All the columns.
- Select col1, col2, col3, ... from table;  --> some of the columns. This is called projection.
- Select distinct col1_name, col2_name from table; --> Distinct is a key-word which is used to suppress duplicate records.
- select version(); check the  urrent version of your MySQL.
- Select current_date;
- You can write two or more queries by separating them using a comma. i.e., select version(), current_date;
- You can break your query into multi-line, you will see an arrow symbol.
- To come out of the multi-line query if you want to cancel; just use: \c; or Ctrl +c 

-SQL clause: Mandatory clauses && Optional clauses
-Mandatory clauses ex's: All SQL Commands i.e., SElECT, INSERT, ...etc.; FROM, INTO, ...
-Optional clasues ex's WHERE, GROUP BY, HAVING, ORDER BY

-------------------
  1. WHERE clause - restricting rows
-------------------
- Acting as the condition to filter our relevant data.
- Has the highest priority over the other optional clauses: will hence be processed first after the mandatory clauses.
- Operators to use alongside where clause:
- If you type;  HELP FUNCTIONS you will be able to see several types of opreators.

-------------------
  2. GROUP BY clause - Forming groups
-------------------
- Evaluated after where clause if it is existed.
- 2nd priority in optional clauses.
-Often used with aggregate functions.

 select count(employee_id) as employee_Count,department_id from employees group by department_id; //number of employees in each dept.
-------------------
  3. HAVING clause - restricting groups
-------------------

-------------------
  4. ORDER BY clause - sorting
-------------------

- Aggregate functions
--------------------
-------------------
  1. COUNT() - returns the number of rows that matches a specified criterion||condition.
-------------------
- SELECT COUNT(column_name) FROM table_name WHERE condition;
-------------------
  2. MAX() - returns the largest  value of the selected column
-------------------
- select max(salary) as max_salary from employees;

-------------------
  3. MIN() -returns the smallest value of the selected column
-------------------
- select min(salary) as min_salary from employees;

-------------------
  4. AVG() - returns the average value of a numeric column.
-------------------


-------------------
  4. SUM() 
-------------------


Operators
-----------
- For a specific type of operator; help Comparison Operators
    1. AND
    2. OR
    3.
- ...etc


-CONSTRAINTS  -- Restriction based on business requirements.
--------------
  1. Domain Integrity constrints:  Defined as part of column definition. Ex; Not null, check, Default 
-Can be defined while creating a table as part of column definition or when modifying a table.
Syntax: - alter table set eno not null;
        - CREATE TABLE Persons (ID int NOT NULL, LastName varchar(255) NOT NULL,);

-------------------
  1.1. default - Sets a default value for a column if no value is specified
-------------------
- has highest priority and therefore should come first.
   => alter table emp modify dept_no int default 10;
-------------------
  1.2. Not null - Ensures that a column cannot have a NULL value
-------------------
- 2nd highest priority
-
-------------------
  1.3. check - Ensures that the values in a column satisfies a specific condition
-------------------
- used to limit the value range that can be placed in a column.
alter table emp add check(dept_no in (10,20,30));


  2. Entity||Object integrity Constrints. : Defined at table level . Ex: default, PK
----------------------------------
  3.


- Counting Rows:
----------------
- Select employee records who are getting salary between 5000 to 10000;
- Select all employees who belong to dept_id

Null value treatment
--------------------

Means nothing or unkown value.
We cannot compare Null with another NullIf Null is present i an expression then the result of that expresiion will be Null.

IfNull() funtion:
------------------
Used to check if the value is Null then it returns exp2 else return exp1
ifNull(exp1, exp2);
Select IfNull(Commision_pct, 1.1) from employees;

IsNull(exp1)
-------------
- Used to check if a column consist a null avalue or not.

NullIf(exp1, exp2)
---------------------





   1. INSERT
   ----------
   ----------
   
   Syntax: INSERT INTO <table_name> [(Col1, Cool2, ...)] VALUES(val1, val2, ...);
   
        - In insert stmt the column list is optional. If we are not proving column name list, then we must provide the values in the sequence present in the table.
		- If we are mentioning column list then we should mention the values in the order in which they are prestnt in the column list.
		-
   
   2. DELETE 
   -----------
   ------------
     Syntax:  2.1 : Delete all records from the table.  DELETE FROM <table_name>;
	          ---
			  2.2 :  
			  ---
			  
			  
			  
			  
			  
[11:48] Bibhuranjan Mohanty
Write a SQL query to list the employees’ name, increased their salary by 15%, and expressed as number of Dollars.
[11:53] Bibhuranjan Mohanty
SELECT FIRST_NAME,LAST_NAME ,SALARY ,(SALARY * 15/100) AS INCREMENT,(SALARY + (SALARY * 15/100)) AS TOTALSALARY FROM EMPLOYEES;
[11:57] Bibhuranjan Mohanty
Write a SQL query to list the employee's name and job name as a format of "Employee & Job".
[12:11] Bibhuranjan Mohanty
SELECT EMPLOYEE_ID,SALARY,COMMISSION_PCT,(SALARY * COMMISSION_PCT) AS COMMISSION,(SALARY + (SALARY * COMMISSION_PCT)) AS TOTALSALARY FROM EMPLOYEES;
[12:12] Bibhuranjan Mohanty
SELECT EMPLOYEE_ID,SALARY,(SALARY * COMMISSION_PCT) AS COMMISSION FROM EMPLOYEES;

[12:12] Bibhuranjan Mohanty
1. Return complete information about the employees.
2. Write a SQL query to find the salaries of all employees.
3. Write a SQL query to find the unique designations of the employees. Return job name.
4. Write a SQL query to list the employees’ name, increased their salary by 15%, and expressed as number of Dollars.
5. Write a SQL query to list the employee's name and job name as a format of "Employee & Job".
6. Write a query in SQL to produce the output of employees as follows.
  Employee JONAS(manager)
7.Write a SQL query to find those employees with hire date in the format like February 22, 1991. Return employee ID, employee name, salary, hire date.
8. Write a SQL query to count the number of characters except the spaces for each employee name. Return employee name length.
9. Write a SQL query to find the employee ID, salary, and commission of all the employees.
10. Write a SQL query to find the unique department with jobs. Return department ID, Job name.
11. Write a SQL query to find those employees who do not belong to the department 2001. Return complete information about the employees.
12. Write a SQL query to find those employees who joined before 1991. Return complete information about the employees.
13. Write a SQL query to calculate the average salary of employees who work as analysts. Return average salary.
14. Write a SQL query to find the details of the employee ‘BLAZE’.
15. Write a SQL query to identify employees whose commissions exceed their salaries. Return complete information about the employees.
16. Write a SQL query to identify those employees whose salaries exceed 3000 after receiving a 25% salary increase. Return complete information about the employees.
17. Write a SQL query to find the names of the employees whose length is six. Return employee name.
18. Write a SQL query to find out which employees joined in the month of January. Return complete information about the employees.
19. Write a SQL query to separate the names of employees and their managers by the string 'works for'.
20. Write a SQL query to find those employees whose designation is ‘CLERK’. Return complete information about the employees.

[15:47] Bibhuranjan Mohanty
SELECT * from employees where salary>5000 and salary<10000;
[15:47] Bibhuranjan Mohanty
SELECT * from employees where salary between 5000 and 10000;
[15:48] Bibhuranjan Mohanty
SELECT * from employees where salary>=5000 and salary<=10000;
[15:53] Bibhuranjan Mohanty
SELECT * from employees where DEPARTMENT_ID=90 OR DEPARTMENT_ID=30 OR DEPARTMENT_ID =100 ;
[15:53] Bibhuranjan Mohanty
SELECT * from employees where  DEPARTMENT_ID IN(90,30,100) ;
[16:10] Bibhuranjan Mohanty
INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME , LAST_NAME   ,EMAIL    , PHONE_NUMBER       , HIRE_DATE  ,JOB_ID     , SALARY   , COMMISSION_PCT , MANAGER_ID , DEPARTMENT_ID) VALUES(800,'ALOK','KUMAR','ALOKKUMAR','456.123.345','1998-12-05','AC_ACCOUNT',NULL,NULL,101,110);
[16:10] Bibhuranjan Mohanty
UPDATE EMPLOYEES SET SALARY=8000 where EMPLOYEE_ID=800;
[16:10] Bibhuranjan Mohanty
SELECT EMPLOYEE_ID ,SALARY ,COMMISSION_PCT , (SALARY+(SALARY*COMMISSION_PCT*100)) AS TOTAL_SALARY FROM EMPLOYEES;


NULL values
 
   NULL = NULL
 
 
   NULL  means nothing or it is an unknown value
 
   We can not compare NULL with another NULL
 
   If NULL is present in an expression then result of the expression will be NULL
 
   SELECT NULL+23 ; -> NULL
 
   
 
   INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME , LAST_NAME   ,EMAIL    , PHONE_NUMBER       , HIRE_DATE  ,JOB_ID     , SALARY   ,    COMMISSION_PCT , MANAGER_ID , DEPARTMENT_ID) VALUES(800,'ALOK','KUMAR','ALOKKUMAR','456.123.345','1998-12-  05','AC_ACCOUNT',NULL,NULL,101,110);
 
   UPDATE EMPLOYEES SET SALARY=8000 where EMPLOYEE_ID=800;
 
   SELECT EMPLOYEE_ID ,SALARY ,COMMISSION_PCT , (SALARY+(SALARY*COMMISSION_PCT*100)) AS TOTAL_SALARY FROM EMPLOYEES;
 
    IFNULL() FUnction :
   ------------------
 
   - IFNULL function is used to check if the value is null then it returns exp2 else return exp1
   - IFNULL(expr1,expr2);
 
   - Select Commission_pct from employees;
 
   - Select IFNULL(Commission_pct,1.1) from employees;
 
   - mysql> SELECT IFNULL(1,0);
        -> 1
     mysql> SELECT IFNULL(NULL,10);
        -> 10
     mysql> SELECT IFNULL(1/0,10);
        -> 10
     mysql> SELECT IFNULL(1/0,'yes');
        -> 'yes'
 
   ISNULL(expr1) :
   ---------------
 
   - It is used to check a column consisting any null value or not.
 
   - Example:
 
     mysql> SELECT ISNULL(1+1);
        -> 0
     mysql> SELECT ISNULL(1/0);
        -> 1
 
   - SELECT RECORDS FROM EMPLOYEES TABLE  WHERE COMMISSION_PCT IS NOT NULL
 
      SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL;
      SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS  NULL;
 
   
   NULLIF(expr1,expr2)
   -------------------
    Description:
         Returns NULL if expr1 = expr2 is true, otherwise returns expr1. 
         This is the same as CASE WHEN expr1 = expr2 THEN NULL ELSE expr1 END.
         The return value has the same type as the first argument.
    Syntax:
            NULLIF(expr1,expr2)
 
     
    URL: https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html
 
    Examples:
      mysql> SELECT NULLIF(1,1);
        -> NULL
      mysql> SELECT NULLIF(1,2);
        -> 1
 

   - SELECT EMPLOYEE_ID,NULLIF(COMMISSION_PCT,8.0) FROM EMPLOYEES ;
 
   
 
  MYSQL> SELECT EMPLOYEE_ID ,SALARY ,COMMISSION_PCT , (SALARY+(SALARY*IFNULL(COMMISSION_PCT,0)*100)) AS TOTAL_SALARY FROM EMPLOYEES;
 
 
   ISNULL(expr)
   -------------------
   Name: 'ISNULL'
   Description:
   Syntax:
   ISNULL(expr)
 
   If expr is NULL, ISNULL() returns 1, otherwise it returns 0.
 
   URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html
 
   Examples:
   mysql> SELECT ISNULL(1+1);
        -> 0
   mysql> SELECT ISNULL(1/0);
        -> 1
		
		
[16:56] Bibhuranjan Mohanty
SELECT COALESCE(COMMISSION_PCT,10,20) FROM EMPLOYEES ;
[16:56] Bibhuranjan Mohanty
ame: 'COALESCE'

Description:

Syntax:

COALESCE(value,...)
 
Returns the first non-NULL value in the list, or NULL if there are no

non-NULL values.
 
The return type of COALESCE() is the aggregated type of the argument

types.
 
URL: https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html
 
Examples:

mysql> SELECT COALESCE(NULL,1);

        -> 1

mysql> SELECT COALESCE(NULL,NULL,NULL);

        -> NULL

---------
JOINS ---> https://techcsm-my.sharepoint.com/:v:/g/personal/bibhuranjan_m_csm_tech/Eby_69jBWkZIsvnoyXAOUTcBbe90HOqXGT6YHraZww7hEA
---------
[16:37] Bibhuranjan Mohanty
SELECT EMPLOYEE_ID ,FIRST_NAME ,DEPARTMENT_ID FROM EMPLOYEES;
[16:37] Bibhuranjan Mohanty
SELECT EMPLOYEES.EMPLOYEE_ID ,EMPLOYEES.FIRST_NAME ,DEPARTMENTS.DEPARTMENT_NAME FROM EMPLOYEES INNER JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID=DEPARTMENTS.DEPARTMENT_ID;
[16:37] Bibhuranjan Mohanty
SELECT E.EMPLOYEE_ID ,E.FIRST_NAME ,D.DEPARTMENT_NAME FROM EMPLOYEES AS E INNER JOIN DEPARTMENTS AS D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID;   
SELECT E.EMPLOYEE_ID ,E.FIRST_NAME ,D.DEPARTMENT_NAME FROM EMPLOYEES AS E INNER JOIN DEPARTMENTS AS D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID WHERE D.DEPARTMENT_NAME LIKE 'IT';
[16:41] Bibhuranjan Mohanty
SELECT D.Department_NAME,COUNT(E.EMPLOYEE_ID) FROM EMPLOYEES AS E INNER JOIN DEPARTMENTS AS D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID GROUP BY D.DEPARTMENT_NAME;
[16:42] Bibhuranjan Mohanty
SELECT D.Department_NAME,COUNT(E.EMPLOYEE_ID) FROM EMPLOYEES AS E INNER JOIN DEPARTMENTS AS D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID GROUP BY D.DEPARTMENT_NAME HAVING DEPARTMENT_NAME LIKE 'SHIPPING';
-----------------
JOINS
------------------
SELECT  FIRST_NAME,LAST_NAME , JOB_TITLE,DEPARTMENT_NAME FROM EMPLOYEES INNER JOIN  JOBS ON EMPLOYEES.JOB_ID = JOBS.JOB_ID INNER JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;
1. Write a SQL query to find the first name, last name, department number, and department name for each employee.
 
2. Write a SQL query to find the first name, last name, department, city, and state province for each employee.
 
3. Write a SQL query to find the first name, last name, salary, and job grade for all employees.
 
4. Write a SQL query to find all those employees who work in department ID 80 or 40. Return first name, last name, department number and department name.
 
5. Write a SQL query to find those employees whose first name contains the letter ‘z’. Return first name, last name, department, city, and state province.
 
6. Write a SQL query to find all departments, including those without employees. Return first name, last name, department ID, department name.
 
7. Write a SQL query to find the employees who earn less than the employee of ID 182. Return first name, last name and salary.
 
8. Write a SQL query to find the employees and their managers. Return the first name of the employee and manager.
 
9. Write a SQL query to display the department name, city, and state province for each department.
 
10.Write a SQL query to find out which employees have or do not have a department. Return first name, last name, department ID, department name.
 
11.Write a SQL query to find the employees and their managers. Those managers do not work under any manager also appear in the list. Return the first name of the employee and manager.
 
12. Write a SQL query to find the employees who work in the same department as the employee with the last name Taylor. Return first name, last name and department ID.
 
13. Write a SQL query to find all employees who joined on or after 1st January 1993 and on or before 31 August 1997. Return job title, department name, employee name, and joining date of the job.
 
14. Write a SQL query to calculate the difference between the maximum salary of the job and the employee's salary. Return job title, employee name, and salary difference.
 
15. Write a SQL query to calculate the average salary, the number of employees receiving commissions in that department. Return department name, average salary and number of employees.
 
16. Write a SQL query to calculate the difference between the maximum salary and the salary of all the employees who work in the department of ID 80. Return job title, employee name and salary difference.
 
17. Write a SQL query to find the name of the country, city, and departments, which are running there.
 
 
18. Write a SQL query to find the department name and the full name (first and last name) of the manager.
 
 
19. Write a SQL query to calculate the average salary of employees for each job title.
 
20. Write a SQL query to find the employees who earn $12000 or more. Return employee ID, starting date, end date, job ID and department ID.
 
21. Write a SQL query to find out which departments have at least two employees. Group the result set on country name and city. Return country name, city, and number.
 
22. Write a SQL query to find the department name, full name (first and last name) of the manager and their city.
 
23. Write a SQL query to calculate the number of days worked by employees in a department of ID 80. Return employee ID, job title, number of days worked.
 
24. Write a SQL query to find full name (first and last name), and salary of all employees working in any department in the city of London.
 
25. Write a SQL query to find full name (first and last name), job title, start and end date of last jobs of employees who did not receive commissions.
 
26. Write a SQL query to find the department name, department ID, and number of employees in each department.
 
27. Write a SQL query to find out the full name (first and last name) of the employee with an ID and the name of the country where he/she is currently employed.



Write a query to find the name (first_name, last_name), and salary of the employees whose salary is greater than the average salary.
Write a query to find the name (first_name, last_name) of the employees who have a manager and worked in a USA based department.
[17:01] Bibhuranjan Mohanty
1.Write a query to find the name (first_name, last_name) and the salary of the employees who have a higher salary than the employee whose last_name='Bull' .
 
SELECT FIRST_NAME, LAST_NAME, SALARY 

FROM employees 

WHERE SALARY > 

(SELECT salary FROM employees WHERE last_name = 'Bull');
 
 
2.Write a query to find the name (first_name, last_name) of all employees who works in the IT department.
 
SELECT first_name, last_name 

FROM employees 

WHERE department_id 

IN (SELECT department_id FROM departments WHERE department_name='IT');
 
3.Write a query to find the name (first_name, last_name) of the employees who have a manager and worked in a USA based department.
 
SELECT first_name, last_name FROM employees 

WHERE manager_id in (select employee_id 

FROM employees WHERE department_id 

IN (SELECT department_id FROM departments WHERE location_id 

IN (select location_id from locations where country_id='US')));
 
4. Write a query to find the name (first_name, last_name) of the employees who are managers.
 
SELECT first_name, last_name 

FROM employees 

WHERE (employee_id IN (SELECT manager_id FROM employees));
 
5. Write a query to find the name (first_name, last_name), and salary of the employees whose salary is greater than the average salary.
 
SELECT first_name, last_name, salary FROM employees 

WHERE salary > (SELECT AVG(salary) FROM employees);
